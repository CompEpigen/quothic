sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores
subtypes = factor(expr$default)
levels(subtypes) = paste0(sctype_scores$type[order(sctype_scores$cluster)],"-like")
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "default", cols = ccolss) + DimPlot(expr, group.by = "subtype")
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)
gggr
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+
gggr
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,2)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="Medium"
confidence[sctype_scores$avg_scores<0.1]="Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores
subtypes = factor(expr$default)
levels(subtypes) = paste0(sctype_scores$type[order(sctype_scores$cluster)],"-like")
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "default", cols = ccolss) + DimPlot(expr, group.by = "subtype")
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+
gggr
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+ NoLegend()+
gggr
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,2)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="Medium"
confidence[sctype_scores$avg_scores<0.1]="Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores
subtypes = factor(expr$default)
levels(subtypes) = paste0(sctype_scores$type[order(sctype_scores$cluster)],"-like")
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "default", cols = ccolss) + DimPlot(expr, group.by = "subtype")
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+ NoLegend()+
gggr
DimPlot(expr, group.by = "default", cols = ccolss) + DimPlot(expr, group.by = "subtype") + NoLegend()
DimPlot(expr, group.by = "default", cols = ccolss) + DimPlot(expr, group.by = "subtype")
DimPlot(expr, group.by = "default", cols = ccolss) + NoLegend() + DimPlot(expr, group.by = "subtype")
DimPlot(expr, group.by = "default", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype")
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype")
DimPlot(expr, group.by = "subtype") + DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() +
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
DimPlot(expr, group.by = "subtype") + DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend()
DimPlot(expr, group.by = "subtype", label = T) + NoLegend() + DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = F)
DimPlot(expr, group.by = "subtype", label = F)
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = F)
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype", label = F)
sctype_scores
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="Medium"
confidence[sctype_scores$avg_scores<0.1]="Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("conf_High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="conf_Medium"
confidence[sctype_scores$avg_scores<0.09]="conf_Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores$cluster[sctype_scores$confidence=="conf_Low"] = "Unknown"
subtypes = factor(expr$default)
levels(subtypes) = paste0(sctype_scores$type[order(sctype_scores$cluster)],"-like")
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype", label = F)
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
sctype_scores$cluster[sctype_scores$confidence=="conf_Low"] = rep("Unknown",length(sctype_scores$cluster[sctype_scores$confidence=="conf_Low"]))
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("conf_High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="conf_Medium"
confidence[sctype_scores$avg_scores<0.09]="conf_Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores$cluster[sctype_scores$confidence=="conf_Low"] = rep("Unknown",length(sctype_scores$cluster[sctype_scores$confidence=="conf_Low"]))
subtypes = factor(expr$default)
levels(subtypes) = paste0(sctype_scores$type[order(sctype_scores$cluster)],"-like")
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype", label = F)
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("conf_High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="conf_Medium"
confidence[sctype_scores$avg_scores<0.09]="conf_Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores$cluster[sctype_scores$confidence=="conf_Low"] = rep("Unknown",length(sctype_scores$cluster[sctype_scores$confidence=="conf_Low"]))
sctype_scores
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("conf_High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="conf_Medium"
confidence[sctype_scores$avg_scores<0.09]="conf_Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores$type[sctype_scores$confidence=="conf_Low"] = rep("Unknown",length(sctype_scores$cluster[sctype_scores$confidence=="conf_Low"]))
sctype_scores
subtypes = factor(expr$default)
levels(subtypes) = paste0(sctype_scores$type[order(sctype_scores$cluster)],"-like")
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype", label = F)
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+ NoLegend()+
gggr
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("conf_High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="conf_Medium"
confidence[sctype_scores$avg_scores<0.09]="conf_Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores$type = paste0(sctype_scores$type, "-like")
sctype_scores$type[sctype_scores$confidence=="conf_Low"] = rep("Unknown",length(sctype_scores$cluster[sctype_scores$confidence=="conf_Low"]))
sctype_scores
subtypes = factor(expr$default)
levels(subtypes) = sctype_scores$type[order(sctype_scores$cluster)]
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype", label = F)
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()
DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+ NoLegend()+
gggr
gggr + DimPlot(expr, reduction = "umap", group.by = "default", label = TRUE, repel = TRUE, cols = ccolss)+ NoLegend()
gggr + DimPlot(expr, reduction = "umap", group.by = "default", label = F, repel = TRUE, cols = ccolss)+ NoLegend()
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()+
theme(legend.position = "none")
gggr + DimPlot(expr, reduction = "umap", group.by = "default", label = F, repel = TRUE, cols = ccolss)+ NoLegend()
# DB file
db_ = "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue = "Pancreas" # e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain, Pancreas
# prepare gene sets
gs_list = gene_sets_prepare(db_, tissue)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
expr = obj
expr@meta.data$default = as.character(expr@meta.data$subgroup)
# run ScType
es.max <- sctype_score(scRNAseqData = expr[["RNA"]]@scale.data, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
dim(es.max)
# merge by cluster
cL_resutls = do.call("rbind", lapply(unique(expr@meta.data$default), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(expr@meta.data[expr@meta.data$default==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(expr@meta.data$default==cl)), 10)
}))
sctype_scores = cL_resutls %>% dplyr::group_by(cluster) %>% top_n(n = 1, wt = scores)
#print(sctype_scores)
# set low-confident (low ScType score) clusters to "unknown"
avg_scores = round(as.numeric(as.character(sctype_scores$scores))/sctype_scores$ncells,4)
sctype_scores = data.frame(sctype_scores,avg_scores)
confidence = rep("conf_High",nrow(sctype_scores))
confidence[sctype_scores$avg_scores<0.25]="conf_Medium"
confidence[sctype_scores$avg_scores<0.09]="conf_Low"
sctype_scores = data.frame(sctype_scores,confidence)
sctype_scores$type = paste0(sctype_scores$type, "-like")
sctype_scores$type[sctype_scores$confidence=="conf_Low"] = rep("Unknown",length(sctype_scores$cluster[sctype_scores$confidence=="conf_Low"]))
sctype_scores
subtypes = factor(expr$default)
levels(subtypes) = sctype_scores$type[order(sctype_scores$cluster)]
expr = AddMetaData(expr, metadata=subtypes, col.name = "subtype")
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
DimPlot(expr, group.by = "sample.ident", cols = ccolss, label = T) + NoLegend() + DimPlot(expr, group.by = "subtype", label = F)
subtypes = rownames(es.max)[apply(as.data.frame(es.max), 2, function(column) { which.max(column)  })]
subtypes = factor(subtypes)
expr = AddMetaData(expr, subtypes, col.name = "subtypes")
DimPlot(expr, group.by = "subtypes")
# prepare edges
cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
# prepare nodes
nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c();
ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3")
for (i in 1:length(unique(cL_resutls$cluster))){
dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
}
nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
nodes = nodes[!duplicated(nodes$cluster),]
mygraph <- graph_from_data_frame(edges, vertices=nodes)
# Make the graph
gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) +
geom_node_circle(aes(filter=ord==1,fill=I("#ffffff"), colour=I("#D3D3D3")), alpha=0.9, label=FALSE) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5))) +
#geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !-1, segment.linetype="dotted")
theme_void()+
theme(legend.position = "none")
gggr + DimPlot(expr, reduction = "umap", group.by = "default", label = F, repel = TRUE, cols = ccolss)+ NoLegend()
remove.packages("quothic")
gc()
# Restart R session
setwd("/omics/groups/OE0219/internal/MJMC/Tools/quothic")
devtools::install(upgrade = "never")
# Load the needed packages
library(quothic)
obj = readRDS(file.path(inputPath, "YAPC-S3_Harmony","expr_atleast10cells.RDS"))
?clusterTH_silhouette_score
# Restart R session
setwd("/omics/groups/OE0219/internal/MJMC/Tools/quothic")
devtools::install(upgrade = "never")
gc()
exists("clusterTH_silhouette_score", where = "package:quothic")
devtools::document()
remove.packages("quothic")
# Restart R session
setwd("/omics/groups/OE0219/internal/MJMC/Tools/quothic")
devtools::install(upgrade = "never")
remove.packages("quothic")
# Restart R session
setwd("/omics/groups/OE0219/internal/MJMC/Tools/quothic")
devtools::install(upgrade = "never")
library(quothic)
remove.packages("quothic")
